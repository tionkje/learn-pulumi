// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { GetDnsRecordsArgs, GetDnsRecordsResult, GetDnsRecordsOutputArgs } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));

export { GetDnsZonesArgs, GetDnsZonesResult, GetDnsZonesOutputArgs } from "./getDnsZones";
export const getDnsZones: typeof import("./getDnsZones").getDnsZones = null as any;
export const getDnsZonesOutput: typeof import("./getDnsZones").getDnsZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZones","getDnsZonesOutput"], () => require("./getDnsZones"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "hetzner:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "hetzner:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("hetzner", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("hetzner", "index/dnsZone", _module)
pulumi.runtime.registerResourcePackage("hetzner", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:hetzner") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
